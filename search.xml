<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[C++ primer学习笔记（二）]]></title>
      <url>/2017/06/20/C-primer%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="charpter-3"><a href="#charpter-3" class="headerlink" title="charpter 3"></a>charpter 3</h2><ul>
<li>using namespace::name<br>例如 <code>using std::cin ;</code>  //引入命名空间的某个成员<br>  <code>using namespace std ;</code>//引入命名空间std <h4 id="string-标准库"><a href="#string-标准库" class="headerlink" title="string 标准库"></a>string 标准库</h4><blockquote>
<p>#include <string><br>   using namespace std;</string></p>
</blockquote>
</li>
</ul>
<ul>
<li><h5 id="string-初始化"><a href="#string-初始化" class="headerlink" title="string 初始化"></a>string 初始化</h5>  string s1(n,’c’) 将s1初始化为连续n个字符c组成<br>  string a(“hello”)</li>
<li><h5 id="string-的基本操作-string"><a href="#string-的基本操作-string" class="headerlink" title="string 的基本操作 string"></a>string 的基本操作 <code>string</code></h5>  输入 <code>cin&gt;&gt;s</code>  //忽略开头的空白 直到遇到下一处空白停止<br>  读取一行 <code>geline(cin, s)</code> //保留空白 ，遇到换行符停止<br>  empty 是否为空<br>  size 返回长度不包含’/0’<code>s.size()</code> = <code>strlen(s.c_str())</code><br>  **注意size返回为无符号的整数</li>
<li><h5 id="string-加法"><a href="#string-加法" class="headerlink" title="string 加法"></a>string 加法</h5>两侧必须有一个string 例如<code>&quot;hello&quot;+&quot;dd&quot;</code>不合法</li>
<li><h5 id="string-字符的比较"><a href="#string-字符的比较" class="headerlink" title="string 字符的比较"></a>string 字符的比较</h5>isalnum() isalpha() 头文件cctype或者ctype.h <a href="http://book.2cto.com/201309/32066.html" target="_blank" rel="external">http://book.2cto.com/201309/32066.html</a></li>
<li><h5 id="对string-对象每个字符操作"><a href="#对string-对象每个字符操作" class="headerlink" title="对string 对象每个字符操作"></a>对string 对象每个字符操作</h5>  for（declaration ： expression）<pre><code>statement  
</code></pre>  for（auto c : str）<br>  cout&lt;&lt;c&lt;&lt;endl; </li>
<li></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C++ primer学习笔记（二）]]></title>
      <url>/2017/06/20/test/</url>
      <content type="html"><![CDATA[<h2 id="charpter-3"><a href="#charpter-3" class="headerlink" title="charpter 3"></a>charpter 3</h2><ul>
<li>using namespace::name<br>例如 <code>using std::cin ;</code>  //引入命名空间的某个成员<br>  <code>using namespace std ;</code>//引入命名空间std <h4 id="string-标准库"><a href="#string-标准库" class="headerlink" title="string 标准库"></a>string 标准库</h4><blockquote>
<p>#include <string><br>   using namespace std;</string></p>
</blockquote>
</li>
</ul>
<ul>
<li><h5 id="string-初始化"><a href="#string-初始化" class="headerlink" title="string 初始化"></a>string 初始化</h5>  string s1(n,’c’) 将s1初始化为连续n个字符c组成<br>  string a(“hello”)</li>
<li><h5 id="string-的基本操作-string-s"><a href="#string-的基本操作-string-s" class="headerlink" title="string 的基本操作 string s"></a>string 的基本操作 <code>string s</code></h5>  输入 <code>cin&gt;&gt;s</code>  //忽略开头的空白 直到遇到下一处空白停止<br>  读取一行 <code>geline(cin, s)</code> //保留空白 ，遇到换行符停止<br>  empty 是否为空<br>  size 返回长度不包含’/0’<code>s.size()</code> = <code>strlen(s.c_str())</code><br>  **注意size返回为无符号的整数</li>
<li>string 加法 两侧必须有一个string 例如<code>&quot;hello&quot;+&quot;dd&quot;</code>不合法</li>
<li>string 字符的比较 isalnum() isalpha() </li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C++ primer 学习笔记（一）]]></title>
      <url>/2017/06/18/C-primer-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>C++ primer 学习笔记（一）</p>
<p>charpter1</p>
<ul>
<li></li>
</ul>
<ul>
<li>查看main函数的返回值： linux $ echo $?  <pre><code>windows $ echo %ERRORLEVEL%
</code></pre></li>
<li>标准输出输入对象：cout / cin / cerr / clog 显示警告和错误信息</li>
<li>endl：操纵符，结束当前行，并将与设备关联的缓冲区内容刷入设备中。</li>
<li>从键盘输入文件结束符  windows下 ctrl+Z ，unix下Ctrl+D  </li>
<li>使用文件重定向  $ addItems <infile outfile=""> //addTtems为可执行文件<br>charpter2</infile></li>
</ul>
<ul>
<li></li>
</ul>
<ul>
<li><p>算术类型：</p>
<blockquote>
<p>char  8位<br>short 16位<br>int   16/32位<br>long  32位<br>long long 64位<br>float 32位<br>doubke 64位  </p>
</blockquote>
</li>
<li><p>类型转换： 给无符号类型赋值时，超出范围，则值为总数取模后的余数。<br>例如unsigned char c= -1 ， c=-1%256=255  </p>
</li>
<li>含有无符号类型的表达式 ： 无符号+有符号 ，会将有符号强行转成无符号，方式同上。若结果为负，也会转成无符号  </li>
<li>全局变量和局部变量同名，可使用：：来使用全局变量的值</li>
<li>引用即别名，为已经存在的对象所起的另一个名字 int &amp;a=b；类型必须完全匹配，比如示例中b必须为int型</li>
<li>指针： 定义时 int <em>p = &amp;a；类型必须相同，不能定义指向引用的指针。 空指针  int </em>p=0；<code>if（p）表示如果p不是空指针则</code></li>
<li>常量指针` int *const p，表示指针指向的地址无法改变，指针本身是常量  <pre><code>const int *p ,表示指针指向的对象是常量`  
</code></pre></li>
<li>类型别名： typedef xx  xx   <pre><code>* using xx=xx      
</code></pre></li>
<li>类型别名</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[rviz]]></title>
      <url>/2017/05/19/rviz/</url>
      <content type="html"><![CDATA[<h2 id="学习Rviz"><a href="#学习Rviz" class="headerlink" title="学习Rviz"></a>学习Rviz</h2><ul>
<li><font color="#0099ff" size="4" face="宋体">1.Markers: Sending Basic Shapes (C++)</font><br><a href="http://wiki.ros.org/rviz/Tutorials/Markers%3A%20Basic%20Shapes" target="_blank" rel="external">http://wiki.ros.org/rviz/Tutorials/Markers%3A%20Basic%20Shapes</a></li>
</ul>
<p>rviz中基本的类型有visualization_msgs/Marker </p>
<p>Marker 类型中主要有</p>
<blockquote>
<p>Header         //包括框架和时间戳</p>
<p>ns               //marker的名字</p>
<p>id                //与ns一起创建唯一的</p>
<p>type            //发送类型</p>
<p>action          // 通常有ADD or DELETE</p>
<p>geometry_msgs/Pose pose</p>
<p>geometry_msgs/Vector3 scale</p>
<p>std_msgs/ColorRGBA color</p>
<p>duration lifetime //持续时间，ros::Duration()意味着不会自动删除</p>
<p>bool frame_locked </p>
</blockquote>
<p><strong>发布话题，消息类型为marker。rivz界面中添加marker，更改话题名</strong>。</p>
<p>-<font color="#0099ff" size="4" face="宋体">2.Markers: Points and Lines (C++)</font> </p>
<p>LINE_LIST   每一个线需要两个点 ，即一对点</p>
<p>markers不仅提供简单的形状类型，还有点、线段、线集合等。</p>
<p>LINE_STRIP     为点向量，每两点相连   </p>
<p>-<font color="#0099ff" size="4" face="宋体">3.Markers: Interactive Markers</font> </p>
<p>rviz中基本的类型有 visualization_msgs/InteractiveMarker</p>
<p>如果你想创造一个节点提供一系列的交互markers，你需要构成一个InteractiveMarkerServer对象。rviz做为客户端。</p>
<p><img src="http://i.imgur.com/yYxrmYp.png" alt=""></p>
<p>###交互marker需了解<br><a href="http://docs.ros.org/api/visualization_msgs/html/index-msg.html" target="_blank" rel="external">http://docs.ros.org/api/visualization_msgs/html/index-msg.html</a><br><strong>visualization_msgs/InteractiveMarker, visualization_msgs/InteractiveMarkerControl and visualization_msgs/InteractiveMarkerFeedback</strong></p>
<ol>
<li>Writing a Simple Interactive Marker Server 交互服务器编写</li>
</ol>
<p>2. </p>
]]></content>
      
        
        <tags>
            
            <tag> ROS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[marry you]]></title>
      <url>/2017/05/13/marry-you/</url>
      <content type="html"><![CDATA[<h1 id="BRUNO-MARS-MARRY-YOU"><a href="#BRUNO-MARS-MARRY-YOU" class="headerlink" title="BRUNO MARS - MARRY YOU"></a>BRUNO MARS - MARRY YOU</h1><font size="4">|<br>it’s a beautiful night we’re looking for something <font color="#0099ff" size="4">|</font> dumb to do<br><br>———-<br>       D                                           E<br>hey<font color="##0099FF" size="4">|</font>  baby i think i wanna marry <font color="#0099ff" size="4">|</font> you<br><br>———-<br>       G                                           D<br><br>is it the look in your eyes or is it <font color="#0099ff" size="4">|</font> this dancing juice<br><br>———-<br>       D                                           E<br>who <font color="#0099ff" size="4">|</font> cares baby’ i think i wanna marry<font color="#0099ff" size="4">|</font>  you<br><br>———-<br>      G                                           D<br>|well i know this little chapel on the boulevard<br><br>———-<br>       D<br>we can <font color="#0099ff" size="4">|</font> go whoa whoa<br><br>———-<br>       E<br>no one<font color="#0099ff" size="4">|</font> will no whoa<br><br>———-<br>      G<br>oh <font color="#0099ff" size="4">|</font>come on girl<br><br>———-<br>       D<br>who cares if we’re trashed<br>got a pocket full of cash we can blow whoa whoa<br>shots of patrol whoa whoa<br>and guitar girl<br><br>don’t say no no no no no<br>just say yeah yeah yeah yeah yeah<br>and we’ll go go go go go<br>if you’re ready’ like i’m ready<br><br>cos it’s a beautiful nigt we’re looking for something dumb to do<br>hey baby i think i wanna marry you<br>is it the look in your eyes or is it this dancing juice<br>who cares baby’ i think i wanna marry you<br><br>oh<br>i’ll go get the ring<br>let the choir bell sing like ooh ooh ooh<br>so what you wanna do ooh ooh<br>lets just run girl<br>if we wake up and you want to break up<br>that’s cool ooh ooh<br>no i won’t blame you ooh ooh<br>it was fun girl<br><br>don’t say no no no no no<br>just say yeah yeah yeah yeah yeah<br>and we’ll go go go go go<br>if you’re ready’ like i’m ready<br><br>cos it’s a beautiful nigt we’re looking for something dumb to do<br>hey baby i think i wanna marry you<br>is it the look in your eyes or is it this dancing juice<br>who cares baby’ i think i wanna marry you<br><br>just say i do ooh ooh ooh<br>tell me right now baby<br>tell me right now baby’ baby<br>just say i do ooh ooh ooh<br>tell me right now baby<br>tell me right now baby’ baby<br><br>oh<br>it’s a beautiful nigt we’re looking for something dumb to do<br>hey baby i think i wanna marry you<br>is it the look in your eyes or is it this dancing juice<br>who cares baby’ i think i wanna marry you<br><br></font> ]]></content>
      
        
        <tags>
            
            <tag> 吉他 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[UDP编程]]></title>
      <url>/2017/05/11/UDP%E7%BC%96%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>UDP通信简单说来就是向固定IP发送数据，而不需要必须确认对方是否存在。通信过程简单，无需握手。当然也无法判断是否接收正常。</p>
<p>UDP编程过程：<br>基本函数</p>
<ul>
<li><p>建立套接字<br>socket函数：为了执行网络输入输出，一个进程必须做的第一件事就是调用socket函数获得一个文件描述符。</p>
<p>  <code>sockfd=socket(AF_INET,SOCK_DGRAM,0)</code>第一个参数指明了协议簇，目前支持5种协议簇，最常用的有AF_INET(IPv4协议)和AF_INET6(IPv6协议)；第二个参数指明套接口类型，有三种类型可选：SOCK_STREAM(字节流套接口)、SOCK_DGRAM(数据报套接口)和SOCK_RAW(原始套接口)；如果套接口类型不是原始套接口，那么第三个参数就为0。。</p>
</li>
</ul>
<ul>
<li><p>bind函数：为套接口分配一个本地IP和协议端口，对于网际协议，协议地址是32位IPv4地址或128位IPv6地址与16位的TCP或UDP端口号的组合；如指定端口为0，调用bind时内核将选择一个临时端口，如果指定一个通配IP地址，则要等到建立连接后内核才选择一个本地IP地址。<br><code>int bind(int sockfd, const struct sockaddr * server, socklen_t addrlen);</code></p>
<p>  第一个参数是socket函数返回的套接口描述字；第二和第第三个参数分别是一个指向特定于协议的地址结构的指针和该地址结构的长度。</p>
</li>
</ul>
<ul>
<li>recvfrom函数：UDP使用recvfrom()函数接收数据，他类似于标准的read()，但是在recvfrom()函数中要指明目的地址<br>  <code>ssize_t recvfrom(int sockfd, void *buf, size_t len, int flags, struct sockaddr * from, size_t *addrlen);</code><br>返回接收到数据的长度－－－成功　　　-1－－－失败　0—无数据<br>  第一个参数套接字，第二个接受数组，第三个参数缓冲区长度，flags参数是传输控制标志，一般为0。from表示sockaddr结构地址，最后一个为sockaddr 结构大小</li>
</ul>
<ul>
<li>sendto函数：UDP使用sendto()函数发送数据，他类似于标准的write()，但是在sendto()函数中要指明目的地址。<br><code>ssize_t sendto(int sockfd, const void *buf, size_t len, int flags, const struct sockaddr * to, int addrlen);</code><br>返回发送数据的长度－－－成功　　　-1－－－失败　</li>
</ul>
<p>　　前三个参数等同于函数read()的前三个参数，flags参数是传输控制标志。参数to指明数据将发往的协议地址，他的大小由addrlen参数来指定。</p>
<ul>
<li>select函数：<br><code>int select(int maxfdp,fd_set *readfds,fd_set *writefds,fd_set *errorfds,struct timeval *timeout);</code></li>
</ul>
<ol>
<li>int maxfdp是一个整数值，指集合中所有文件描述符的范围，即所有文件描述符的最大值加1</li>
<li>fd_set *readfds是指向fd_set结构的指针，这个集合中应该包括读取文件描述符</li>
<li>fd_set *writefds是指向fd_set结构的指针，这个集合中应该写包括文件描述符</li>
<li>fd_set *errorfds同上面两个参数的意图，用来监视文件错误异常</li>
<li>struct timeval* timeout是select的超时时间，这个参数至关重要.超时时间内为阻塞，超时则调出，返回0值。错误返回-1；</li>
</ol>
<h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><pre><code>#include&lt;stdio.h&gt;  
#include&lt;string.h&gt;  
#include&lt;unistd.h&gt;  
#include&lt;sys/types.h&gt;  
#include&lt;sys/socket.h&gt;  
#include&lt;stdlib.h&gt;  
#include&lt;netinet/in.h&gt;  
#include&lt;arpa/inet.h&gt;  

#define PORT 1234  
#define MAXDATASIZE 100  

main()  
{  
    int sockfd;  
    struct sockaddr_in server;    
    socklen_t addrlen;  
    int num;  
    char buf[MAXDATASIZE];  

    if((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) == -1)   
    {  
        perror(&quot;Creatingsocket failed.&quot;);  
        exit(1);  
    }  

    bzero(&amp;server,sizeof(server));  
    server.sin_family=AF_INET;  
    server.sin_port=htons(PORT);  
    server.sin_addr.s_addr= htonl (INADDR_ANY);  
    if(bind(sockfd, (struct sockaddr *)&amp;server, sizeof(server)) == -1)  
    {  
        perror(&quot;Bind()error.&quot;);  
        exit(1);  
    }     

    addrlen=sizeof(server);  
    while(1)    
    {  
      num =recvfrom(sockfd,buf,MAXDATASIZE,0,(struct sockaddr*)&amp;server,&amp;addrlen);                                     

    if (num &lt; 0)  
    {  
        perror(&quot;recvfrom() error\n&quot;);  
        exit(1);  
    }  

    buf[num] = &apos;\0&apos;;  
    printf(&quot;You got a message (%s%) from client.\nIt&apos;s ip is%s, port is %d.\n&quot;,buf,inet_ntoa(client.sin_addr),htons(client.sin_port));   
    sendto(sockfd,&quot;Welcometo my server.\n&quot;,22,0,(struct sockaddr *)&amp;client,addrlen);  

    close(sockfd);    
} 
</code></pre><hr>
<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><pre><code>#include &lt;stdio.h&gt;  
#include &lt;stdlib.h&gt;  
#include &lt;unistd.h&gt;  
#include &lt;string.h&gt;  
#include &lt;sys/types.h&gt;  
#include &lt;sys/socket.h&gt;  
#include &lt;netinet/in.h&gt;  
#include &lt;netdb.h&gt;  

#define    UDP_TEST_PORT        8001
#define UDP_SERVER_IP         &quot;192.168.60.169&quot;

int main(int argc, char *argv[])  
{  
   struct sockaddr_in addr;
   int sockfd, len = 0;    
   socklen_t addr_len = sizeof(struct sockaddr_in);        
   char buffer[256];

   /* 建立socket，注意必须是SOCK_DGRAM */
   if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) &lt; 0) {
       perror(&quot;socket&quot;);
       exit(1);
   }

   /* 填写sockaddr_in*/
   bzero(&amp;addr, sizeof(addr));
   addr.sin_family = AF_INET;
   addr.sin_port = htons(UDP_TEST_PORT);
   addr.sin_addr.s_addr = inet_addr(UDP_SERVER_IP);
        close(sockfd);  

  buffer=&quot;hello&quot;; 
  while(1) {
   sendto(sockfd, buffer, len, 0, (struct sockaddr *)&amp;addr, addr_len);
   sleep(2); /*睡眠2秒*/
   printf(&quot;%s\n&quot;,buffer);
   }


}  
</code></pre><hr>
<p>Select<br>由于recvfrom会造成程序堵塞，故而UDP一般可配合select函数使用</p>
<pre><code>fd_set fds;
timeval timeout={time,0};
int net;

while（1)
{
    timeout.tv_sec=time;
    timeout.tv_usec=0;

    FD_ZERO(&amp;fds);        //描述符情空
    FD_SET(sockfd,&amp;fds);//将套接字绑定描述符
    net=0;
    net=select(sockfd+1,&amp;fds,NULL,NULL,&amp;timeout);

    if(net&lt;0)
    {
        exit(-1);
    }
    else if(net==0) 
    {
        printf(&quot;timeout\n&quot;);

    }    
     else
     {    if(FD_ISSET(sockfd,&amp;fds))
        {
            num =recvfrom(sockfd,buf,MAXDATASIZE,0,(struct sockaddr*);    
        } 
    }
}
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> 通信 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[机器人空间转换]]></title>
      <url>/2017/04/23/%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%A9%BA%E9%97%B4%E8%BD%AC%E6%8D%A2/</url>
      <content type="html"><![CDATA[<h1 id="rotation"><a href="#rotation" class="headerlink" title="rotation"></a><font size="6">rotation</font></h1><p><img src="http://chart.googleapis.com/chart?cht=tx&chl=\Large _{}^{A}\textrm{P}_{B} \ast  _{ }^{B}\textrm{P}=_{ }^{A}\textrm{P}" style="border:none;"> </p>
<p><font size="4">前者表示坐标系A到B的旋转矩阵，后两个分别表示各坐标系下P点的坐标</font></p>
<p><img src="http://i.imgur.com/KmtUu2m.png" alt=""><br><img src="http://i.imgur.com/PPFDPru.png" alt=""></p>
<h1 id="3D-transform"><a href="#3D-transform" class="headerlink" title="3D transform"></a><font size="6">3D transform</font></h1><p><img src="http://i.imgur.com/ORyVj5L.png" alt=""></p>
<ul>
<li>Moving around<br>The camera observes point P in its own coordinate frame. But then the transform from the world to the camera is T. What’s the position of the point in the world coordinate? T*p</li>
</ul>
<ol>
<li>reference frame changed</li>
<li>point changed<br>relative movement  </li>
</ol>
<h1 id="Transform-inverse"><a href="#Transform-inverse" class="headerlink" title="Transform inverse"></a><font size="6">Transform inverse</font></h1><p><img src="http://i.imgur.com/pBAg6LF.png" alt=""><br><img src="http://i.imgur.com/BmtNqqz.png" alt=""></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[markdown一些用法]]></title>
      <url>/2017/04/22/%E6%B5%8B%E8%AF%95/</url>
      <content type="html"><![CDATA[<p>this is a test for markdown</p>
<p><img src="http://i.imgur.com/Ly3CR5A.png" alt=""></p>
<p><img src="http://chart.googleapis.com/chart?cht=tx&chl=\Large x=\frac{-b\pm\sqrt{b^2-4ac}}{2a}" style="border:none;"></p>
<p><img src="http://chart.googleapis.com/chart?cht=tx&chl=\Large \frac{a}{b}" style="border:none;"></p>
<p>插入公式方法：    </p>
<p><strong>1.利用latex在线生成公式代码</strong><br><a href="http://latex.codecogs.com/eqneditor/editor.php" target="_blank" rel="external">http://latex.codecogs.com/eqneditor/editor.php</a></p>
<p><strong>2.利用google chart服务器生成公式</strong><br>&lt;//img src=”<a href="http://chart.googleapis.com/chart?cht=tx&amp;chl=\Large" target="_blank" rel="external">http://chart.googleapis.com/chart?cht=tx&amp;chl=\Large</a> <em>x=\frac{-b\pm\sqrt{b^2-4ac}}{2a}”</em>  style=”border:none;”//&gt;<br>更改倾斜部分内容即可 ，双斜杠需删掉</p>
<p>更改字体：<a href="https://jingyan.baidu.com/article/380abd0a1c856d1d90192cd9.html" target="_blank" rel="external">https://jingyan.baidu.com/article/380abd0a1c856d1d90192cd9.html</a></p>
<p><a href="http://blog.csdn.net/testcs_dn/article/details/45719357/" target="_blank" rel="external">http://blog.csdn.net/testcs_dn/article/details/45719357/</a></p>
<font face="黑体">我是黑体字</font>

<font color="#0099ff" size="4" face="黑体">color=#0099ff size=72 face=”黑体”</font>]]></content>
      
        
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/04/21/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
